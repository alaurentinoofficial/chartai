// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: databases.sql

package postgresdb_sql

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createDatabase = `-- name: CreateDatabase :exec
INSERT INTO "Databases"
("Id", "CreatedAt", "ModifiedAt", "IsDeleted", "IsArchived", "Name", "Type", "ConnectionString", "Schema", "LastSync")
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type CreateDatabaseParams struct {
	Id               uuid.UUID
	CreatedAt        time.Time
	ModifiedAt       time.Time
	IsDeleted        bool
	IsArchived       bool
	Name             string
	Type             int32
	ConnectionString string
	Schema           pqtype.NullRawMessage
	LastSync         sql.NullTime
}

func (q *Queries) CreateDatabase(ctx context.Context, arg CreateDatabaseParams) error {
	_, err := q.db.ExecContext(ctx, createDatabase,
		arg.Id,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.IsDeleted,
		arg.IsArchived,
		arg.Name,
		arg.Type,
		arg.ConnectionString,
		arg.Schema,
		arg.LastSync,
	)
	return err
}

const deleteDatabaseById = `-- name: DeleteDatabaseById :exec
DELETE FROM "Databases"
WHERE
	"Id" = $1
`

func (q *Queries) DeleteDatabaseById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDatabaseById, id)
	return err
}

const getDatabaseById = `-- name: GetDatabaseById :one
SELECT "Id", "CreatedAt", "ModifiedAt", "IsArchived", "IsDeleted", "Name", "Type", "ConnectionString", "Schema", "LastSync" FROM "Databases"
WHERE
	"Id" = $1
	AND NOT ("IsDeleted" OR "IsArchived")
`

func (q *Queries) GetDatabaseById(ctx context.Context, id uuid.UUID) (Database, error) {
	row := q.db.QueryRowContext(ctx, getDatabaseById, id)
	var i Database
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.IsArchived,
		&i.IsDeleted,
		&i.Name,
		&i.Type,
		&i.ConnectionString,
		&i.Schema,
		&i.LastSync,
	)
	return i, err
}

const getDatabases = `-- name: GetDatabases :many
SELECT "Id", "CreatedAt", "ModifiedAt", "IsArchived", "IsDeleted", "Name", "Type", "ConnectionString", "Schema", "LastSync" FROM "Databases"
WHERE NOT ("IsDeleted" OR "IsArchived")
`

func (q *Queries) GetDatabases(ctx context.Context) ([]Database, error) {
	rows, err := q.db.QueryContext(ctx, getDatabases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Database
	for rows.Next() {
		var i Database
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.IsArchived,
			&i.IsDeleted,
			&i.Name,
			&i.Type,
			&i.ConnectionString,
			&i.Schema,
			&i.LastSync,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softArchiveDatabaseById = `-- name: SoftArchiveDatabaseById :exec
UPDATE "Databases"
SET
	"ModifiedAt" = CURRENT_TIMESTAMP,
	"IsArchived" = TRUE
WHERE
	"Id" = $1
	AND NOT ("IsDeleted" OR "IsArchived")
`

func (q *Queries) SoftArchiveDatabaseById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softArchiveDatabaseById, id)
	return err
}

const softDeleteDatabaseById = `-- name: SoftDeleteDatabaseById :exec
UPDATE "Databases"
SET
	"ModifiedAt" = CURRENT_TIMESTAMP,
	"IsDeleted" = TRUE
WHERE
	"Id" = $1
	AND NOT ("IsDeleted" OR "IsArchived")
`

func (q *Queries) SoftDeleteDatabaseById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteDatabaseById, id)
	return err
}

const updateDatabaseById = `-- name: UpdateDatabaseById :exec
UPDATE "Databases"
SET
	"ModifiedAt" = $2,
	"IsDeleted" = $3,
	"IsArchived" = $4,
	"Name" = $5,
	"Type" = $6,
	"ConnectionString" = $7,
	"Schema" = $8,
	"LastSync" = $9
WHERE
	"Id" = $1
	AND NOT ("IsDeleted" OR "IsArchived")
`

type UpdateDatabaseByIdParams struct {
	Id               uuid.UUID
	ModifiedAt       time.Time
	IsDeleted        bool
	IsArchived       bool
	Name             string
	Type             int32
	ConnectionString string
	Schema           pqtype.NullRawMessage
	LastSync         sql.NullTime
}

func (q *Queries) UpdateDatabaseById(ctx context.Context, arg UpdateDatabaseByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateDatabaseById,
		arg.Id,
		arg.ModifiedAt,
		arg.IsDeleted,
		arg.IsArchived,
		arg.Name,
		arg.Type,
		arg.ConnectionString,
		arg.Schema,
		arg.LastSync,
	)
	return err
}
