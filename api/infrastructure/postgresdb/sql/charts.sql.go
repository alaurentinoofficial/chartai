// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: charts.sql

package postgresdb_sql

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createChart = `-- name: CreateChart :exec
INSERT INTO "Charts"
("Id", "CreatedAt", "ModifiedAt", "IsDeleted", "IsArchived", "DatabaseId", "Title", "Type", "Query", "CategoricalColumnName", "ValueColumnName")
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
`

type CreateChartParams struct {
	Id                    uuid.UUID
	CreatedAt             time.Time
	ModifiedAt            time.Time
	IsDeleted             bool
	IsArchived            bool
	DatabaseId            uuid.UUID
	Title                 string
	Type                  string
	Query                 string
	CategoricalColumnName sql.NullString
	ValueColumnName       sql.NullString
}

func (q *Queries) CreateChart(ctx context.Context, arg CreateChartParams) error {
	_, err := q.db.ExecContext(ctx, createChart,
		arg.Id,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.IsDeleted,
		arg.IsArchived,
		arg.DatabaseId,
		arg.Title,
		arg.Type,
		arg.Query,
		arg.CategoricalColumnName,
		arg.ValueColumnName,
	)
	return err
}

const deleteChartById = `-- name: DeleteChartById :exec
DELETE FROM "Charts"
WHERE
	"Id" = $1
`

func (q *Queries) DeleteChartById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChartById, id)
	return err
}

const getChartById = `-- name: GetChartById :one
SELECT "Id", "CreatedAt", "ModifiedAt", "IsArchived", "IsDeleted", "Title", "Type", "Query", "DatabaseId", "CategoricalColumnName", "ValueColumnName" FROM "Charts"
WHERE
	"Id" = $1
	AND NOT ("IsDeleted" OR "IsArchived")
`

func (q *Queries) GetChartById(ctx context.Context, id uuid.UUID) (Chart, error) {
	row := q.db.QueryRowContext(ctx, getChartById, id)
	var i Chart
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.IsArchived,
		&i.IsDeleted,
		&i.Title,
		&i.Type,
		&i.Query,
		&i.DatabaseId,
		&i.CategoricalColumnName,
		&i.ValueColumnName,
	)
	return i, err
}

const getCharts = `-- name: GetCharts :many
SELECT "Id", "CreatedAt", "ModifiedAt", "IsArchived", "IsDeleted", "Title", "Type", "Query", "DatabaseId", "CategoricalColumnName", "ValueColumnName" FROM "Charts"
WHERE NOT ("IsDeleted" OR "IsArchived")
`

func (q *Queries) GetCharts(ctx context.Context) ([]Chart, error) {
	rows, err := q.db.QueryContext(ctx, getCharts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chart
	for rows.Next() {
		var i Chart
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.IsArchived,
			&i.IsDeleted,
			&i.Title,
			&i.Type,
			&i.Query,
			&i.DatabaseId,
			&i.CategoricalColumnName,
			&i.ValueColumnName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softArchiveChartById = `-- name: SoftArchiveChartById :exec
UPDATE "Charts"
SET
	"ModifiedAt" = CURRENT_TIMESTAMP,
	"IsArchived" = TRUE
WHERE
	"Id" = $1
	AND NOT ("IsDeleted" OR "IsArchived")
`

func (q *Queries) SoftArchiveChartById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softArchiveChartById, id)
	return err
}

const softDeleteChartById = `-- name: SoftDeleteChartById :exec
UPDATE "Charts"
SET
	"ModifiedAt" = CURRENT_TIMESTAMP,
	"IsDeleted" = TRUE
WHERE
	"Id" = $1
	AND NOT ("IsDeleted" OR "IsArchived")
`

func (q *Queries) SoftDeleteChartById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteChartById, id)
	return err
}

const updateChartById = `-- name: UpdateChartById :exec
UPDATE "Charts"
SET
	"ModifiedAt" = $2,
	"IsDeleted" = $3,
	"IsArchived" = $4,
	"Title" = $5,
	"Type" = $6,
	"Query" = $7,
	"CategoricalColumnName" = $8,
	"ValueColumnName" = $9
WHERE
	"Id" = $1
	AND NOT ("IsDeleted" OR "IsArchived")
`

type UpdateChartByIdParams struct {
	Id                    uuid.UUID
	ModifiedAt            time.Time
	IsDeleted             bool
	IsArchived            bool
	Title                 string
	Type                  string
	Query                 string
	CategoricalColumnName sql.NullString
	ValueColumnName       sql.NullString
}

func (q *Queries) UpdateChartById(ctx context.Context, arg UpdateChartByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateChartById,
		arg.Id,
		arg.ModifiedAt,
		arg.IsDeleted,
		arg.IsArchived,
		arg.Title,
		arg.Type,
		arg.Query,
		arg.CategoricalColumnName,
		arg.ValueColumnName,
	)
	return err
}
